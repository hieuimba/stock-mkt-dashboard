{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-findash-dev"
		},
		"ls_blob_storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob_storage'"
		},
		"ls_sql_server_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_server'"
		},
		"ls_funcapp_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://funcapp-findash-dev.azurewebsites.net/api/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/create_analytics_layer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TodaySnapShot",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Updated",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','Central Standard Time')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "SELECT \n\tp.*,\n\tt.SecType,\n\t(([Close] - [52WkLow]) / ([52WkHigh] - [52WkLow])) * 100 as 'C%52WkRange',\n\t (([Close] - [KCLower]) / ([KCUpper] - [KCLower])) * 100 as 'KCPos'\nFROM \n\t[raw].[prices] p \n\tLEFT JOIN raw.tickers t ON t.ticker = p.ticker \nWHERE p.[Date] = (\n    SELECT MAX([Date])\n    FROM [raw].[Prices]\n    WHERE [Ticker] = p.[Ticker]\n)\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE analytics.TodaySnapshot",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "analytics",
									"TableName": "TodaySnapshot"
								}
							}
						]
					},
					{
						"name": "AggPrices",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TodaySnapShot",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Updated",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','Central Standard Time')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "DECLARE @Tickers AS dbo.TickerTable;\nINSERT INTO @Tickers (Ticker, SecType)\nSELECT DISTINCT Ticker, SecType\nFROM analytics.TodaySnapshot;\n\nSELECT a.Ticker, a.SecType, a.Prices as 'OneMonthPrices', b.OneQuarterPrices\nFROM dbo.GetRecentPrices(@Tickers, 21) a\nLEFT JOIN\n(\n    SELECT Ticker, SecType, Prices as 'OneQuarterPrices'\n    FROM dbo.GetRecentPrices(@Tickers, 21*3)\n) b ON a.Ticker = b.Ticker AND a.SecType = b.SecType\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE analytics.AggPrices",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "analytics",
									"TableName": "AggPrices"
								}
							}
						]
					},
					{
						"name": "AggReturns",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Updated",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','Central Standard Time')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "SELECT P.Ticker,\n\t\tT.SecType,\n       EXP(SUM(LOG((CASE WHEN [Order] <= 3 THEN ([Return]+1) END)))) -1 AS OneWeekReturn,\n\t   EXP(SUM(LOG((CASE WHEN [Order] <= 19 THEN ([Return]+1) END)))) -1 AS OneMonthReturn,\n\t   EXP(SUM(LOG((CASE WHEN [Order] <= 61 THEN ([Return]+1) END)))) -1 AS OneQuarterReturn,\n\t\tEXP(SUM(LOG((CASE WHEN [Order] <= 250 THEN ([Return]+1) END)))) -1 AS OneYearReturn\nFROM raw.Prices P\nLEFT JOIN raw.Tickers T ON T.Ticker = P.Ticker\nGROUP BY P.Ticker, T.SecType;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE analytics.AggReturns",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "analytics",
									"TableName": "AggReturns"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Analytics"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-18T03:15:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_generic_sql_db')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_sql_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/create_presentation_layer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StockHistograms",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Updated",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','Central Standard Time')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "select B.Signal, B.SecType, B.Bin, COALESCE(sub.BinCount, 0) AS BinCount\nfrom config.HistogramBins B\nLeft join (\nSELECT \n    'SigmaSpike' AS Signal,\n    [SecType],\n    CASE\n        WHEN [SigmaSpike] < -4 THEN '< -4'\n        WHEN [SigmaSpike] >= -4 AND [SigmaSpike] < -3 THEN '-4 - -3'\n        WHEN [SigmaSpike] >= -3 AND [SigmaSpike] < -2 THEN '-3 - -2'\n        WHEN [SigmaSpike] >= -2 AND [SigmaSpike] < -1 THEN '-2 - -1'\n        WHEN [SigmaSpike] >= -1 AND [SigmaSpike] < 0 THEN '-1 - 0'\n        WHEN [SigmaSpike] >= 0 AND [SigmaSpike] < 1 THEN '0 - 1'\n        WHEN [SigmaSpike] >= 1 AND [SigmaSpike] < 2 THEN '1 - 2'\n        WHEN [SigmaSpike] >= 2 AND [SigmaSpike] < 3 THEN '2 - 3'\n        WHEN [SigmaSpike] >= 3 AND [SigmaSpike] < 4 THEN '3 - 4'\n        WHEN [SigmaSpike] >= 4 THEN '> 4'\n    END AS Bin,\n    COUNT(*) AS BinCount\nFROM [analytics].[TodaySnapshot]\nWHERE [SigmaSpike] IS NOT NULL\nand SecType = 'Stock'\nGROUP BY \n    [SecType],\n    CASE\n        WHEN [SigmaSpike] < -4 THEN '< -4'\n        WHEN [SigmaSpike] >= -4 AND [SigmaSpike] < -3 THEN '-4 - -3'\n        WHEN [SigmaSpike] >= -3 AND [SigmaSpike] < -2 THEN '-3 - -2'\n        WHEN [SigmaSpike] >= -2 AND [SigmaSpike] < -1 THEN '-2 - -1'\n        WHEN [SigmaSpike] >= -1 AND [SigmaSpike] < 0 THEN '-1 - 0'\n        WHEN [SigmaSpike] >= 0 AND [SigmaSpike] < 1 THEN '0 - 1'\n        WHEN [SigmaSpike] >= 1 AND [SigmaSpike] < 2 THEN '1 - 2'\n        WHEN [SigmaSpike] >= 2 AND [SigmaSpike] < 3 THEN '2 - 3'\n        WHEN [SigmaSpike] >= 3 AND [SigmaSpike] < 4 THEN '3 - 4'\n        WHEN [SigmaSpike] >= 4 THEN '> 4'\n    END\n) sub\non b.Signal = sub.Signal\nand b.Bin = sub.Bin\nwhere b.Signal = 'SigmaSpike' and b.SecType = 'Stock'\n\nUNION ALL\n\nselect B.Signal, B.SecType, B.Bin, COALESCE(sub.BinCount, 0) AS BinCount\nfrom config.HistogramBins B\nLeft join (\nSELECT \n    'KCPos' AS Signal,\n    [SecType],\n    CASE\n        WHEN [KCPos] < 0 THEN '< 0'\n        WHEN [KCPos] >= 0 AND [KCPos] <= 12.5 THEN '0 - 12.5'\n        WHEN [KCPos] > 12.5 AND [KCPos] <= 25 THEN '12.5 - 25'\n        WHEN [KCPos] > 25 AND [KCPos] <= 37.5 THEN '25 - 37.5'\n        WHEN [KCPos] > 37.5 AND [KCPos] <= 50 THEN '37.5 - 50'\n        WHEN [KCPos] > 50 AND [KCPos] <= 62.5 THEN '50 - 62.5'\n        WHEN [KCPos] > 62.5 AND [KCPos] <= 75 THEN '62.5 - 75'\n        WHEN [KCPos] > 75 AND [KCPos] <= 87.5 THEN '75 - 87.5'\n        WHEN [KCPos] > 87.5 AND [KCPos] <= 100 THEN '87.5 - 100'\n        WHEN [KCPos] > 100 THEN '> 100'\n    END AS Bin,\n    COUNT(*) AS BinCount\nFROM [analytics].[TodaySnapshot]\nWHERE [KCPos] IS NOT NULL\nand SecType = 'Stock'\nGROUP BY \n    [SecType],\n    CASE\n        WHEN [KCPos] < 0 THEN '< 0'\n        WHEN [KCPos] >= 0 AND [KCPos] <= 12.5 THEN '0 - 12.5'\n        WHEN [KCPos] > 12.5 AND [KCPos] <= 25 THEN '12.5 - 25'\n        WHEN [KCPos] > 25 AND [KCPos] <= 37.5 THEN '25 - 37.5'\n        WHEN [KCPos] > 37.5 AND [KCPos] <= 50 THEN '37.5 - 50'\n        WHEN [KCPos] > 50 AND [KCPos] <= 62.5 THEN '50 - 62.5'\n        WHEN [KCPos] > 62.5 AND [KCPos] <= 75 THEN '62.5 - 75'\n        WHEN [KCPos] > 75 AND [KCPos] <= 87.5 THEN '75 - 87.5'\n        WHEN [KCPos] > 87.5 AND [KCPos] <= 100 THEN '87.5 - 100'\n        WHEN [KCPos] > 100 THEN '> 100'\n    END) sub\non b.Signal = sub.Signal\nand b.Bin = sub.Bin\nwhere b.Signal = 'KCPos' and b.SecType = 'Stock'\n\nUNION ALL\n\nselect B.Signal, B.SecType, B.Bin, COALESCE(sub.BinCount, 0) AS BinCount\nfrom config.HistogramBins B\nLeft join (\nSELECT \n    '52WkRange' AS Signal,\n    [SecType],\n    CASE\n        WHEN [C%52WkRange] < 0 THEN '< 0'\n        WHEN [C%52WkRange] >= 0 AND [C%52WkRange] <= 12.5 THEN '0 - 12.5'\n        WHEN [C%52WkRange] > 12.5 AND [C%52WkRange] <= 25 THEN '12.5 - 25'\n        WHEN [C%52WkRange] > 25 AND [C%52WkRange] <= 37.5 THEN '25 - 37.5'\n        WHEN [C%52WkRange] > 37.5 AND [C%52WkRange] <= 50 THEN '37.5 - 50'\n        WHEN [C%52WkRange] > 50 AND [C%52WkRange] <= 62.5 THEN '50 - 62.5'\n        WHEN [C%52WkRange] > 62.5 AND [C%52WkRange] <= 75 THEN '62.5 - 75'\n        WHEN [C%52WkRange] > 75 AND [C%52WkRange] <= 87.5 THEN '75 - 87.5'\n        WHEN [C%52WkRange] > 87.5 AND [C%52WkRange] <= 100 THEN '87.5 - 100'\n        WHEN [C%52WkRange] > 100 THEN '> 100'\n    END AS Bin,\n    COUNT(*) AS BinCount\nFROM [analytics].[TodaySnapshot]\nWHERE [C%52WkRange] IS NOT NULL\nand SecType = 'Stock'\nGROUP BY \n    [SecType],\n    CASE\n        WHEN [C%52WkRange] < 0 THEN '< 0'\n        WHEN [C%52WkRange] >= 0 AND [C%52WkRange] <= 12.5 THEN '0 - 12.5'\n        WHEN [C%52WkRange] > 12.5 AND [C%52WkRange] <= 25 THEN '12.5 - 25'\n        WHEN [C%52WkRange] > 25 AND [C%52WkRange] <= 37.5 THEN '25 - 37.5'\n        WHEN [C%52WkRange] > 37.5 AND [C%52WkRange] <= 50 THEN '37.5 - 50'\n        WHEN [C%52WkRange] > 50 AND [C%52WkRange] <= 62.5 THEN '50 - 62.5'\n        WHEN [C%52WkRange] > 62.5 AND [C%52WkRange] <= 75 THEN '62.5 - 75'\n        WHEN [C%52WkRange] > 75 AND [C%52WkRange] <= 87.5 THEN '75 - 87.5'\n        WHEN [C%52WkRange] > 87.5 AND [C%52WkRange] <= 100 THEN '87.5 - 100'\n        WHEN [C%52WkRange] > 100 THEN '> 100'\n    END) sub\non b.Signal = sub.Signal\nand b.Bin = sub.Bin\nwhere b.Signal = '52WkRange' and b.SecType = 'Stock'\n\nUNION ALL\n\nselect B.Signal, B.SecType, B.Bin, COALESCE(sub.BinCount, 0) AS BinCount\nfrom config.HistogramBins B\nLeft join (\nSELECT \n    'RVol' AS Signal,\n    [SecType],\n    CASE\n        WHEN [RVol] >= 0 AND [RVol] <= 1 THEN '0 - 1'\n        WHEN [RVol] > 1 AND [RVol] <= 2 THEN '1 - 2'\n        WHEN [RVol] > 2 AND [RVol] <= 3 THEN '2 - 3'\n        WHEN [RVol] > 3 AND [RVol] <= 4 THEN '3 - 4'\n        WHEN [RVol] > 4 AND [RVol] <= 5 THEN '4 - 5'\n        WHEN [RVol] > 5 THEN '> 5'\n    END AS Bin,\n    COUNT(*) AS BinCount\nFROM [analytics].[TodaySnapshot]\nWHERE [RVol] IS NOT NULL\nAND SecType = 'Stock'\nGROUP BY \n    [SecType],\n    CASE\n        WHEN [RVol] >= 0 AND [RVol] <= 1 THEN '0 - 1'\n        WHEN [RVol] > 1 AND [RVol] <= 2 THEN '1 - 2'\n        WHEN [RVol] > 2 AND [RVol] <= 3 THEN '2 - 3'\n        WHEN [RVol] > 3 AND [RVol] <= 4 THEN '3 - 4'\n        WHEN [RVol] > 4 AND [RVol] <= 5 THEN '4 - 5'\n        WHEN [RVol] > 5 THEN '> 5'\n    END) sub\non b.Signal = sub.Signal\nand b.Bin = sub.Bin\nwhere b.Signal = 'RVol' and b.SecType = 'Stock'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE visual.StockHistogram",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "visual",
									"TableName": "StockHistogram"
								}
							}
						]
					},
					{
						"name": "StockRanking",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Updated",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','Central Standard Time')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "WITH RankedTickers AS (\n    SELECT\n        'Highest' AS RankGroup,\n        '52WkRange' AS Signal,\n        [SecType],\n        [Ticker],\n        [C%52WkRange] as [Value],\n\t\tVolume,\n\t\t[Return]*100 as Change,\n\t\t[Close] as [Last],\n        ROW_NUMBER() OVER (PARTITION BY [SecType] ORDER BY [C%52WkRange] DESC) AS Rank\n    FROM [analytics].[TodaySnapshot]\n\tWHERE [C%52WkRange] is not NULL\n\tAND SecType = 'Stock'\n    UNION ALL\n    SELECT\n        'Lowest' AS RankGroup,\n        '52WkRange' AS Signal,\n        [SecType],\n        [Ticker],\n        [C%52WkRange] as [Value],\n\t\tVolume,\n\t\t[Return]*100 as Change,\n\t\t[Close] as [Last],\n        ROW_NUMBER() OVER (PARTITION BY [SecType] ORDER BY [C%52WkRange] ASC) AS Rank\n    FROM [analytics].[TodaySnapshot]\n\tWHERE [C%52WkRange] is not NULL\n\tAND SecType = 'Stock'\n    UNION ALL\n    SELECT\n        'Highest' AS RankGroup,\n        'KCPos' AS Signal,\n        [SecType],\n        [Ticker],\n        [KCPos] as [Value],\n\t\tVolume,\n\t\t[Return]*100 as Change,\n\t\t[Close] as [Last],\n        ROW_NUMBER() OVER (PARTITION BY [SecType] ORDER BY [KCPos] DESC) AS Rank\n    FROM [analytics].[TodaySnapshot]\n\tWHERE [KCPos] is not NULL\n\tAND SecType = 'Stock'\n    UNION ALL\n    SELECT\n        'Lowest' AS RankGroup,\n        'KCPos' AS Signal,\n        [SecType],\n        [Ticker],\n        [KCPos] as [Value],\n\t\tVolume,\n\t\t[Return]*100 as Change,\n\t\t[Close] as [Last],\n        ROW_NUMBER() OVER (PARTITION BY [SecType] ORDER BY [KCPos] ASC) AS Rank\n    FROM [analytics].[TodaySnapshot]\n\tWHERE [KCPos] is not NULL\n\tAND SecType = 'Stock'\n    UNION ALL\n    SELECT\n        'Highest' AS RankGroup,\n        'SigmaSpike' AS Signal,\n        [SecType],\n        [Ticker],\n        [SigmaSpike] as [Value],\n\t\tVolume,\n\t\t[Return]*100 as Change,\n\t\t[Close] as [Last],\n        ROW_NUMBER() OVER (PARTITION BY [SecType] ORDER BY [SigmaSpike] DESC) AS Rank\n    FROM [analytics].[TodaySnapshot]\n\tWHERE [SigmaSpike] is not NULL\n\tAND SecType = 'Stock'\n    UNION ALL\n    SELECT\n        'Lowest' AS RankGroup,\n        'SigmaSpike' AS Signal,\n        [SecType],\n        [Ticker],\n        [SigmaSpike] as [Value],\n\t\tVolume,\n\t\t[Return]*100 as Change,\n\t\t[Close] as [Last],\n        ROW_NUMBER() OVER (PARTITION BY [SecType] ORDER BY [SigmaSpike] ASC) AS Rank\n    FROM [analytics].[TodaySnapshot]\n\tWHERE [SigmaSpike] is not NULL\n\tAND SecType = 'Stock'\n    UNION ALL\n    SELECT\n        'Highest' AS RankGroup,\n        'RVol' AS Signal,\n        [SecType],\n        [Ticker],\n        [RVol] as [Value],\n\t\tVolume,\n\t\t[Return]*100 as Change,\n\t\t[Close] as [Last],\n        ROW_NUMBER() OVER (PARTITION BY [SecType] ORDER BY [RVol] DESC) AS Rank\n    FROM [analytics].[TodaySnapshot]\n\tWHERE [RVol] is not NULL\n\tAND SecType = 'Stock'\n)\nSELECT\n    Signal,\n    R.SecType,\n    R.Ticker,\n    RankGroup,\n\t[Rank],\n\t[Value],\n\tVolume,\n\tChange,\n\t[Last],\n\tT.Sector,\n\tP.OneMonthPrices as 'Prices'\nFROM RankedTickers R\nLEFT JOIN analytics.AggPrices P on R.Ticker = P.Ticker AND R.SecType = P.SecType\nLEFT JOIN raw.Tickers T on T.Ticker = R.Ticker\nWHERE Rank <= 10\nORDER BY Signal, SecType, RankGroup, Rank",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE visual.StockRanking",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "visual",
									"TableName": "StockRanking"
								}
							}
						]
					},
					{
						"name": "CandlestickChart",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Updated",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','Central Standard Time')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "select  P.Ticker, T.Name, T.SecType,[Date], [Open], [High], [Low], [Close],[Return], Volume \n    from raw.Prices P Left Join raw.Tickers T on P.Ticker = T.Ticker \n        where T.SecType = 'Index'\n            AND [Date] >= DATEADD(month, -2, GETDATE())\nUNION ALL\nselect  P.Ticker, T.ShortName as 'Name', T.SecType,[Date], [Open], [High], [Low], [Close],[Return], Volume\n    from raw.Prices P Left Join config.TickerShortNames T on P.Ticker = T.Ticker\n        where T.SecType = 'ETF'\n            AND [Date] >= DATEADD(month, -2, GETDATE())\n\t\t\tAND P.Ticker LIKE 'XL%'\nORDER BY Ticker, Date",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE visual.CandlestickChart",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "visual",
									"TableName": "CandlestickChart"
								}
							}
						]
					},
					{
						"name": "PerformanceTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Updated",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','Central Standard Time')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "select T.Name, S.Ticker,S.SecType, S.[Return]  as 'OneDayReturn', R.OneWeekReturn,\n      R.OneMonthReturn, R.OneQuarterReturn\n        , R.OneYearReturn, S.SigmaSpike, S.KCPos as 'MonthRange', S.[C%52WkRange] as 'YearRange'\n    from analytics.TodaySnapshot S\n    left join raw.Tickers T on T.Ticker = S.Ticker \n    left join analytics.AggReturns R on R.Ticker  = S.Ticker\n        where S.SecType = 'Index'\n\nUNION ALL\n\nselect T.Name, S.Ticker,S.SecType, S.[Return] as 'OneDayReturn', R.OneWeekReturn,\n      R.OneMonthReturn, R.OneQuarterReturn\n        , R.OneYearReturn, S.SigmaSpike, S.KCPos as 'MonthRange', S.[C%52WkRange] as 'YearRange'\n    from analytics.TodaySnapshot S\n    left join raw.Tickers T on T.Ticker = S.Ticker \n    left join analytics.AggReturns R on R.Ticker  = S.Ticker\n        where S.SecType = 'ETF' AND S.Ticker LIKE 'XL%'\n            Order by S.Ticker",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE visual.PerformanceTable",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "visual",
									"TableName": "PerformanceTable"
								}
							}
						]
					},
					{
						"name": "StockHeatmap",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Updated",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','Central Standard Time')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "select TOP 1000 S.Ticker,S.SecType,S.[Return], COALESCE(S.SigmaSpike, 0) as SigmaSpike, T.Sector, T.Industry, T.MarketCap\n    from analytics.TodaySnapshot S\n    left join raw.Tickers T on T.Ticker = S.Ticker \n    where S.SecType = 'Stock'\n    order by MarketCap desc",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE visual.StockHeatmap",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "visual",
									"TableName": "StockHeatmap"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Presentation"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-18T03:27:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_generic_sql_db')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_sql_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_raw_prices')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prepare_table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_sql_server",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "TRUNCATE TABLE raw.Prices;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "clean_up_table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "fetch_data_in_loop",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "copy_prices_index",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_sql_server",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM raw.Prices where Ticker is null;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "fetch_data_in_loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "prepare_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().globalParameters.Row_Chunks",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "lookup_tickers",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT Ticker\nFROM raw.Tickers\nWHERE SecType in (', '''','Stock','''',',','''','ETF','''', ')\nORDER BY Ticker \nOFFSET ' ,item() ,'ROWS\nFETCH NEXT 500 ROWS ONLY'\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_generic_sql_db",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "copy_prices",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lookup_tickers",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"requestBody": {
													"value": "@{json(concat('{\"tickers\":' ,activity('lookup_tickers').output.value ,'}'))}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "ds_prices_alpaca_source_http",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_generic_sql_table",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "raw",
												"TableName": "Prices"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "lookup_index_tickers",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "prepare_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT Ticker\nFROM raw.Tickers\nWHERE SecType in ('Index')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_generic_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "copy_prices_index",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lookup_index_tickers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"requestBody": {
										"value": "@{json(concat('{\"tickers\":' ,activity('lookup_index_tickers').output.value ,'}'))}",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "ds_prices_yfin_source_http",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "raw",
									"TableName": "Prices"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Staging"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-18T03:12:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_sql_db')]",
				"[concat(variables('factoryId'), '/datasets/ds_prices_yfin_source_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_sql_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_prices_alpaca_source_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_tickers_list_EOW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_tickers_for_each_exchange",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "clear_tickers_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().globalParameters.Exchange_List",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "stage_tickers",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"requestTimeout": "1.00:00:00"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "ds_tickers_list_source_http",
											"type": "DatasetReference",
											"parameters": {
												"Exchange": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_generic_sql_table",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "raw",
												"TableName": "Tickers"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "clear_tickers_table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_sql_server",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM raw.Tickers "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stage_index_tickers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "clear_tickers_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "SecType",
										"value": "Index"
									},
									{
										"name": "MarketCap",
										"value": "-1"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_custom_lists_source_blob",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "index-list.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "raw",
									"TableName": "Tickers"
								}
							}
						]
					},
					{
						"name": "stage_etf_tickers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "clear_tickers_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "SecType",
										"value": "ETF"
									},
									{
										"name": "Sector",
										"value": "Financial"
									},
									{
										"name": "Industry",
										"value": "Exchange Traded Fund"
									},
									{
										"name": "Country",
										"value": "USA"
									},
									{
										"name": "MarketCap",
										"value": "-1"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Ticker",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ticker",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SecType",
											"type": "String"
										},
										"sink": {
											"name": "SecType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Exchange",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Exchange",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Sector",
											"type": "String"
										},
										"sink": {
											"name": "Sector",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Industry",
											"type": "String"
										},
										"sink": {
											"name": "Industry",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MarketCap",
											"type": "String"
										},
										"sink": {
											"name": "MarketCap",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_custom_lists_source_blob",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "etf-list.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "raw",
									"TableName": "Tickers"
								}
							}
						]
					},
					{
						"name": "stage_etf_short_names",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "stage_etf_tickers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "SecType",
										"value": "ETF"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE config.TickerShortNames",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Ticker",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ticker",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SecType",
											"type": "String"
										},
										"sink": {
											"name": "SecType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ShortName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ShortName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_custom_lists_source_blob",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "etf-list.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_generic_sql_table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "config",
									"TableName": "TickerShortNames"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-07T15:45:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server')]",
				"[concat(variables('factoryId'), '/datasets/ds_custom_lists_source_blob')]",
				"[concat(variables('factoryId'), '/datasets/ds_generic_sql_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_tickers_list_source_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/main_pipeline_eod')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Raw",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "get_raw_prices",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Analytics",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_analytics_layer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Presentation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Analytics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_presentation_layer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-18T03:14:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/get_raw_prices')]",
				"[concat(variables('factoryId'), '/pipelines/create_analytics_layer')]",
				"[concat(variables('factoryId'), '/pipelines/create_presentation_layer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_custom_lists_source_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "custom-lists"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Ticker",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_generic_sql_db')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Generic"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_generic_sql_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_server",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Generic"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName\r\n",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_prices_alpaca_source_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_funcapp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "func-get-prices-alpaca?code=QExYJXb5FuMgUUC9Yk-pfh0x5sG5JyxblrFjboeDbeHBAzFulmweqw==",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_funcapp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_prices_yfin_source_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_funcapp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "func-get-prices-yfin?code=9icmNJb9M7CeueZ08Q4PuxyXGZpp-QatCjXT3nfTS8UaAzFuGXgZbg==",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_funcapp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tickers_list_source_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_funcapp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Exchange": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('func-get-tickers-list/',dataset().Exchange,'?code=Q_g8e-jjMwVLcToQsvr2gccq3Dc8RngzR9CwAPPJffZfAzFu1Qcl2g==')",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_funcapp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_funcapp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_funcapp_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_server')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_server_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "main_pipeline_eod",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-06-11T21:27:00",
						"timeZone": "Central Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								16
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/main_pipeline_eod')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_weekly')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "get_tickers_list_EOW",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-06-11T21:25:00",
						"timeZone": "Central Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								18
							],
							"weekDays": [
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/get_tickers_list_EOW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_custom_lists_source_blob_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "custom-lists"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Ticker",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_storage')]"
			]
		}
	]
}